// <auto-generated />
using System;
using EGGPLANT;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EGGPLANT.Migrations
{
    [DbContext(typeof(AppDb))]
    partial class AppDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("EGGPLANT.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<int?>("BuzzerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Errors", (string)null);
                });

            modelBuilder.Entity("EGGPLANT.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("strftime('%Y-%m-%dT%H:%M:%fZ','now')");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .IsUnique()
                        .HasDatabaseName("UX_Recipes_OnlyOneActive")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Recipes", (string)null);
                });

            modelBuilder.Entity("EGGPLANT.RecipeParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Maximum")
                        .HasColumnType("TEXT");

                    b.Property<string>("Minimum")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ValueTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UnitId");

                    b.HasIndex("ValueTypeId");

                    b.ToTable("RecipeParam", (string)null);
                });

            modelBuilder.Entity("EGGPLANT.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", null, t =>
                        {
                            t.HasCheckConstraint("CK_Roles_IsActive_01", "IsActive IN (0,1)");
                        });
                });

            modelBuilder.Entity("EGGPLANT.RoleManageRole", b =>
                {
                    b.Property<int>("ManagerRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanManage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.HasKey("ManagerRoleId", "TargetRoleId");

                    b.HasIndex("TargetRoleId");

                    b.ToTable("RoleManageRole", null, t =>
                        {
                            t.HasCheckConstraint("CK_RMR_CanManage_01", "CanManage IN (0,1)");

                            t.HasCheckConstraint("CK_RMR_Self_01", "ManagerRoleId <> TargetRoleId");
                        });
                });

            modelBuilder.Entity("EGGPLANT.RolePermissionRow", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Granted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("EGGPLANT.RoleScreenAccess", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScreenId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Granted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.HasKey("RoleId", "ScreenId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_RoleScreenAccess_RoleId");

                    b.HasIndex("ScreenId")
                        .HasDatabaseName("IX_RoleScreenAccess_ScreenId");

                    b.ToTable("RoleScreenAccess", null, t =>
                        {
                            t.HasCheckConstraint("CK_RoleScreenAccess_Granted_01", "Granted IN (0,1)");
                        });
                });

            modelBuilder.Entity("EGGPLANT.Screen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Screens", null, t =>
                        {
                            t.HasCheckConstraint("CK_Screens_IsEnabled_01", "IsEnabled IN (0,1)");
                        });
                });

            modelBuilder.Entity("EGGPLANT.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("EGGPLANT.ValueTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueType", (string)null);
                });

            modelBuilder.Entity("EGGPLANT.RecipeParam", b =>
                {
                    b.HasOne("EGGPLANT.Recipe", "Recipe")
                        .WithMany("Params")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EGGPLANT.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EGGPLANT.ValueTypeDef", "ValueType")
                        .WithMany()
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Unit");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("EGGPLANT.RoleManageRole", b =>
                {
                    b.HasOne("EGGPLANT.Role", "Manager")
                        .WithMany("ManageTargets")
                        .HasForeignKey("ManagerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EGGPLANT.Role", "Target")
                        .WithMany("ManagedBy")
                        .HasForeignKey("TargetRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("EGGPLANT.RoleScreenAccess", b =>
                {
                    b.HasOne("EGGPLANT.Role", "Role")
                        .WithMany("ScreenAccesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EGGPLANT.Screen", "Screen")
                        .WithMany("AccessBy")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("EGGPLANT.Recipe", b =>
                {
                    b.Navigation("Params");
                });

            modelBuilder.Entity("EGGPLANT.Role", b =>
                {
                    b.Navigation("ManageTargets");

                    b.Navigation("ManagedBy");

                    b.Navigation("ScreenAccesses");
                });

            modelBuilder.Entity("EGGPLANT.Screen", b =>
                {
                    b.Navigation("AccessBy");
                });
#pragma warning restore 612, 618
        }
    }
}
